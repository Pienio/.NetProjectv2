//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DatabaseAccess.DataAccessService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Entity", Namespace="http://schemas.datacontract.org/2004/07/DatabaseAccess.Model", IsReference=true)]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DatabaseAccess.DataAccessService.Person))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DatabaseAccess.DataAccessService.Visit))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DatabaseAccess.DataAccessService.Doctor))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DatabaseAccess.DataAccessService.Specialization))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DatabaseAccess.DataAccessService.Patient))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DatabaseAccess.DataAccessService.ProfileRequest))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DatabaseAccess.DataAccessService.User))]
    public partial class Entity : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long KeyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte[] VersionField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long Key {
            get {
                return this.KeyField;
            }
            set {
                if ((this.KeyField.Equals(value) != true)) {
                    this.KeyField = value;
                    this.RaisePropertyChanged("Key");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] Version {
            get {
                return this.VersionField;
            }
            set {
                if ((object.ReferenceEquals(this.VersionField, value) != true)) {
                    this.VersionField = value;
                    this.RaisePropertyChanged("Version");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Person", Namespace="http://schemas.datacontract.org/2004/07/DatabaseAccess.Model", IsReference=true)]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DatabaseAccess.DataAccessService.Doctor))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DatabaseAccess.DataAccessService.Patient))]
    public partial class Person : DatabaseAccess.DataAccessService.Entity {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private DatabaseAccess.DataAccessService.User UserField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private DatabaseAccess.DataAccessService.Visit[] VisitsField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DatabaseAccess.DataAccessService.User User {
            get {
                return this.UserField;
            }
            set {
                if ((object.ReferenceEquals(this.UserField, value) != true)) {
                    this.UserField = value;
                    this.RaisePropertyChanged("User");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DatabaseAccess.DataAccessService.Visit[] Visits {
            get {
                return this.VisitsField;
            }
            set {
                if ((object.ReferenceEquals(this.VisitsField, value) != true)) {
                    this.VisitsField = value;
                    this.RaisePropertyChanged("Visits");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Visit", Namespace="http://schemas.datacontract.org/2004/07/DatabaseAccess.Model", IsReference=true)]
    [System.SerializableAttribute()]
    public partial class Visit : DatabaseAccess.DataAccessService.Entity {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime DateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private DatabaseAccess.DataAccessService.Doctor DoctorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private DatabaseAccess.DataAccessService.Patient PatientField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Date {
            get {
                return this.DateField;
            }
            set {
                if ((this.DateField.Equals(value) != true)) {
                    this.DateField = value;
                    this.RaisePropertyChanged("Date");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DatabaseAccess.DataAccessService.Doctor Doctor {
            get {
                return this.DoctorField;
            }
            set {
                if ((object.ReferenceEquals(this.DoctorField, value) != true)) {
                    this.DoctorField = value;
                    this.RaisePropertyChanged("Doctor");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DatabaseAccess.DataAccessService.Patient Patient {
            get {
                return this.PatientField;
            }
            set {
                if ((object.ReferenceEquals(this.PatientField, value) != true)) {
                    this.PatientField = value;
                    this.RaisePropertyChanged("Patient");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Doctor", Namespace="http://schemas.datacontract.org/2004/07/DatabaseAccess.Model", IsReference=true)]
    [System.SerializableAttribute()]
    public partial class Doctor : DatabaseAccess.DataAccessService.Person {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private DatabaseAccess.DataAccessService.WorkingTime FridayWorkingTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private DatabaseAccess.DataAccessService.WorkingTime MondayWorkingTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ProfileAcceptedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private DatabaseAccess.DataAccessService.Specialization[] SpecializationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private DatabaseAccess.DataAccessService.WorkingTime ThursdayWorkingTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private DatabaseAccess.DataAccessService.WorkingTime TuesdayWorkingTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private DatabaseAccess.DataAccessService.WorkingTime WednesdayWorkingTimeField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DatabaseAccess.DataAccessService.WorkingTime FridayWorkingTime {
            get {
                return this.FridayWorkingTimeField;
            }
            set {
                if ((object.ReferenceEquals(this.FridayWorkingTimeField, value) != true)) {
                    this.FridayWorkingTimeField = value;
                    this.RaisePropertyChanged("FridayWorkingTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DatabaseAccess.DataAccessService.WorkingTime MondayWorkingTime {
            get {
                return this.MondayWorkingTimeField;
            }
            set {
                if ((object.ReferenceEquals(this.MondayWorkingTimeField, value) != true)) {
                    this.MondayWorkingTimeField = value;
                    this.RaisePropertyChanged("MondayWorkingTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool ProfileAccepted {
            get {
                return this.ProfileAcceptedField;
            }
            set {
                if ((this.ProfileAcceptedField.Equals(value) != true)) {
                    this.ProfileAcceptedField = value;
                    this.RaisePropertyChanged("ProfileAccepted");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DatabaseAccess.DataAccessService.Specialization[] Specialization {
            get {
                return this.SpecializationField;
            }
            set {
                if ((object.ReferenceEquals(this.SpecializationField, value) != true)) {
                    this.SpecializationField = value;
                    this.RaisePropertyChanged("Specialization");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DatabaseAccess.DataAccessService.WorkingTime ThursdayWorkingTime {
            get {
                return this.ThursdayWorkingTimeField;
            }
            set {
                if ((object.ReferenceEquals(this.ThursdayWorkingTimeField, value) != true)) {
                    this.ThursdayWorkingTimeField = value;
                    this.RaisePropertyChanged("ThursdayWorkingTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DatabaseAccess.DataAccessService.WorkingTime TuesdayWorkingTime {
            get {
                return this.TuesdayWorkingTimeField;
            }
            set {
                if ((object.ReferenceEquals(this.TuesdayWorkingTimeField, value) != true)) {
                    this.TuesdayWorkingTimeField = value;
                    this.RaisePropertyChanged("TuesdayWorkingTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DatabaseAccess.DataAccessService.WorkingTime WednesdayWorkingTime {
            get {
                return this.WednesdayWorkingTimeField;
            }
            set {
                if ((object.ReferenceEquals(this.WednesdayWorkingTimeField, value) != true)) {
                    this.WednesdayWorkingTimeField = value;
                    this.RaisePropertyChanged("WednesdayWorkingTime");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Specialization", Namespace="http://schemas.datacontract.org/2004/07/DatabaseAccess.Model", IsReference=true)]
    [System.SerializableAttribute()]
    public partial class Specialization : DatabaseAccess.DataAccessService.Entity {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private DatabaseAccess.DataAccessService.Doctor[] DoctorsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DatabaseAccess.DataAccessService.Doctor[] Doctors {
            get {
                return this.DoctorsField;
            }
            set {
                if ((object.ReferenceEquals(this.DoctorsField, value) != true)) {
                    this.DoctorsField = value;
                    this.RaisePropertyChanged("Doctors");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Patient", Namespace="http://schemas.datacontract.org/2004/07/DatabaseAccess.Model", IsReference=true)]
    [System.SerializableAttribute()]
    public partial class Patient : DatabaseAccess.DataAccessService.Person {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ProfileRequest", Namespace="http://schemas.datacontract.org/2004/07/DatabaseAccess.Model", IsReference=true)]
    [System.SerializableAttribute()]
    public partial class ProfileRequest : DatabaseAccess.DataAccessService.Entity {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private DatabaseAccess.DataAccessService.Doctor NewProfileField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private DatabaseAccess.DataAccessService.Doctor OldProfileField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DatabaseAccess.DataAccessService.Doctor NewProfile {
            get {
                return this.NewProfileField;
            }
            set {
                if ((object.ReferenceEquals(this.NewProfileField, value) != true)) {
                    this.NewProfileField = value;
                    this.RaisePropertyChanged("NewProfile");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DatabaseAccess.DataAccessService.Doctor OldProfile {
            get {
                return this.OldProfileField;
            }
            set {
                if ((object.ReferenceEquals(this.OldProfileField, value) != true)) {
                    this.OldProfileField = value;
                    this.RaisePropertyChanged("OldProfile");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="User", Namespace="http://schemas.datacontract.org/2004/07/DatabaseAccess.Model", IsReference=true)]
    [System.SerializableAttribute()]
    public partial class User : DatabaseAccess.DataAccessService.Entity {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ActiveField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private DatabaseAccess.DataAccessService.DocOrPat KindField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private DatabaseAccess.DataAccessService.PersonName NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PESELField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PasswordField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Active {
            get {
                return this.ActiveField;
            }
            set {
                if ((this.ActiveField.Equals(value) != true)) {
                    this.ActiveField = value;
                    this.RaisePropertyChanged("Active");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DatabaseAccess.DataAccessService.DocOrPat Kind {
            get {
                return this.KindField;
            }
            set {
                if ((this.KindField.Equals(value) != true)) {
                    this.KindField = value;
                    this.RaisePropertyChanged("Kind");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Mail {
            get {
                return this.MailField;
            }
            set {
                if ((object.ReferenceEquals(this.MailField, value) != true)) {
                    this.MailField = value;
                    this.RaisePropertyChanged("Mail");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DatabaseAccess.DataAccessService.PersonName Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PESEL {
            get {
                return this.PESELField;
            }
            set {
                if ((object.ReferenceEquals(this.PESELField, value) != true)) {
                    this.PESELField = value;
                    this.RaisePropertyChanged("PESEL");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Password {
            get {
                return this.PasswordField;
            }
            set {
                if ((object.ReferenceEquals(this.PasswordField, value) != true)) {
                    this.PasswordField = value;
                    this.RaisePropertyChanged("Password");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PersonName", Namespace="http://schemas.datacontract.org/2004/07/DatabaseAccess.Model")]
    [System.SerializableAttribute()]
    public partial class PersonName : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SurnameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Surname {
            get {
                return this.SurnameField;
            }
            set {
                if ((object.ReferenceEquals(this.SurnameField, value) != true)) {
                    this.SurnameField = value;
                    this.RaisePropertyChanged("Surname");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DocOrPat", Namespace="http://schemas.datacontract.org/2004/07/DatabaseAccess.Model")]
    public enum DocOrPat : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Doctor = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Patient = 1,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="WorkingTime", Namespace="http://schemas.datacontract.org/2004/07/DatabaseAccess.Model")]
    [System.SerializableAttribute()]
    public partial class WorkingTime : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int EndField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int StartField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int End {
            get {
                return this.EndField;
            }
            set {
                if ((this.EndField.Equals(value) != true)) {
                    this.EndField = value;
                    this.RaisePropertyChanged("End");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Start {
            get {
                return this.StartField;
            }
            set {
                if ((this.StartField.Equals(value) != true)) {
                    this.StartField = value;
                    this.RaisePropertyChanged("Start");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="DataAccessService.IDataService")]
    public interface IDataService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataService/GetUserById", ReplyAction="http://tempuri.org/IDataService/GetUserByIdResponse")]
        DatabaseAccess.DataAccessService.User GetUserById(int value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataService/GetUserById", ReplyAction="http://tempuri.org/IDataService/GetUserByIdResponse")]
        System.Threading.Tasks.Task<DatabaseAccess.DataAccessService.User> GetUserByIdAsync(int value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataService/GetUser", ReplyAction="http://tempuri.org/IDataService/GetUserResponse")]
        DatabaseAccess.DataAccessService.User GetUser(string pes, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataService/GetUser", ReplyAction="http://tempuri.org/IDataService/GetUserResponse")]
        System.Threading.Tasks.Task<DatabaseAccess.DataAccessService.User> GetUserAsync(string pes, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataService/GetDoctorById", ReplyAction="http://tempuri.org/IDataService/GetDoctorByIdResponse")]
        DatabaseAccess.DataAccessService.Doctor GetDoctorById(int value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataService/GetDoctorById", ReplyAction="http://tempuri.org/IDataService/GetDoctorByIdResponse")]
        System.Threading.Tasks.Task<DatabaseAccess.DataAccessService.Doctor> GetDoctorByIdAsync(int value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataService/GetDoctorByUserId", ReplyAction="http://tempuri.org/IDataService/GetDoctorByUserIdResponse")]
        DatabaseAccess.DataAccessService.Doctor GetDoctorByUserId(int value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataService/GetDoctorByUserId", ReplyAction="http://tempuri.org/IDataService/GetDoctorByUserIdResponse")]
        System.Threading.Tasks.Task<DatabaseAccess.DataAccessService.Doctor> GetDoctorByUserIdAsync(int value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataService/GetPatientById", ReplyAction="http://tempuri.org/IDataService/GetPatientByIdResponse")]
        DatabaseAccess.DataAccessService.Patient GetPatientById(int value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataService/GetPatientById", ReplyAction="http://tempuri.org/IDataService/GetPatientByIdResponse")]
        System.Threading.Tasks.Task<DatabaseAccess.DataAccessService.Patient> GetPatientByIdAsync(int value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataService/GetPatientByUserId", ReplyAction="http://tempuri.org/IDataService/GetPatientByUserIdResponse")]
        DatabaseAccess.DataAccessService.Patient GetPatientByUserId(int value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataService/GetPatientByUserId", ReplyAction="http://tempuri.org/IDataService/GetPatientByUserIdResponse")]
        System.Threading.Tasks.Task<DatabaseAccess.DataAccessService.Patient> GetPatientByUserIdAsync(int value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataService/Fill", ReplyAction="http://tempuri.org/IDataService/FillResponse")]
        void Fill();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataService/Fill", ReplyAction="http://tempuri.org/IDataService/FillResponse")]
        System.Threading.Tasks.Task FillAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataService/GetDoctorsList", ReplyAction="http://tempuri.org/IDataService/GetDoctorsListResponse")]
        DatabaseAccess.DataAccessService.Doctor[] GetDoctorsList();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataService/GetDoctorsList", ReplyAction="http://tempuri.org/IDataService/GetDoctorsListResponse")]
        System.Threading.Tasks.Task<DatabaseAccess.DataAccessService.Doctor[]> GetDoctorsListAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataService/SearchDoctorsList", ReplyAction="http://tempuri.org/IDataService/SearchDoctorsListResponse")]
        DatabaseAccess.DataAccessService.Doctor[] SearchDoctorsList(DatabaseAccess.DataAccessService.Specialization spec, string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataService/SearchDoctorsList", ReplyAction="http://tempuri.org/IDataService/SearchDoctorsListResponse")]
        System.Threading.Tasks.Task<DatabaseAccess.DataAccessService.Doctor[]> SearchDoctorsListAsync(DatabaseAccess.DataAccessService.Specialization spec, string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataService/GetSpecializationsList", ReplyAction="http://tempuri.org/IDataService/GetSpecializationsListResponse")]
        DatabaseAccess.DataAccessService.Specialization[] GetSpecializationsList();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataService/GetSpecializationsList", ReplyAction="http://tempuri.org/IDataService/GetSpecializationsListResponse")]
        System.Threading.Tasks.Task<DatabaseAccess.DataAccessService.Specialization[]> GetSpecializationsListAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataService/GetPatientVisits", ReplyAction="http://tempuri.org/IDataService/GetPatientVisitsResponse")]
        DatabaseAccess.DataAccessService.Visit[] GetPatientVisits(int id, bool arc);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataService/GetPatientVisits", ReplyAction="http://tempuri.org/IDataService/GetPatientVisitsResponse")]
        System.Threading.Tasks.Task<DatabaseAccess.DataAccessService.Visit[]> GetPatientVisitsAsync(int id, bool arc);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataService/GetDoctorVisits", ReplyAction="http://tempuri.org/IDataService/GetDoctorVisitsResponse")]
        DatabaseAccess.DataAccessService.Visit[] GetDoctorVisits(int id, bool arc);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataService/GetDoctorVisits", ReplyAction="http://tempuri.org/IDataService/GetDoctorVisitsResponse")]
        System.Threading.Tasks.Task<DatabaseAccess.DataAccessService.Visit[]> GetDoctorVisitsAsync(int id, bool arc);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataService/GetRequests", ReplyAction="http://tempuri.org/IDataService/GetRequestsResponse")]
        DatabaseAccess.DataAccessService.ProfileRequest[] GetRequests();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataService/GetRequests", ReplyAction="http://tempuri.org/IDataService/GetRequestsResponse")]
        System.Threading.Tasks.Task<DatabaseAccess.DataAccessService.ProfileRequest[]> GetRequestsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataService/UpdatePatient", ReplyAction="http://tempuri.org/IDataService/UpdatePatientResponse")]
        bool UpdatePatient(DatabaseAccess.DataAccessService.Patient toUpdate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataService/UpdatePatient", ReplyAction="http://tempuri.org/IDataService/UpdatePatientResponse")]
        System.Threading.Tasks.Task<bool> UpdatePatientAsync(DatabaseAccess.DataAccessService.Patient toUpdate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataService/UpdateUserPassword", ReplyAction="http://tempuri.org/IDataService/UpdateUserPasswordResponse")]
        bool UpdateUserPassword(int id, string pass);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataService/UpdateUserPassword", ReplyAction="http://tempuri.org/IDataService/UpdateUserPasswordResponse")]
        System.Threading.Tasks.Task<bool> UpdateUserPasswordAsync(int id, string pass);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataService/UpdateDoctor", ReplyAction="http://tempuri.org/IDataService/UpdateDoctorResponse")]
        bool UpdateDoctor(DatabaseAccess.DataAccessService.Doctor toUpdate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataService/UpdateDoctor", ReplyAction="http://tempuri.org/IDataService/UpdateDoctorResponse")]
        System.Threading.Tasks.Task<bool> UpdateDoctorAsync(DatabaseAccess.DataAccessService.Doctor toUpdate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataService/UpdateSpecialization", ReplyAction="http://tempuri.org/IDataService/UpdateSpecializationResponse")]
        bool UpdateSpecialization(DatabaseAccess.DataAccessService.Specialization toUpdate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataService/UpdateSpecialization", ReplyAction="http://tempuri.org/IDataService/UpdateSpecializationResponse")]
        System.Threading.Tasks.Task<bool> UpdateSpecializationAsync(DatabaseAccess.DataAccessService.Specialization toUpdate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataService/DeleteDoctor", ReplyAction="http://tempuri.org/IDataService/DeleteDoctorResponse")]
        bool DeleteDoctor(DatabaseAccess.DataAccessService.Doctor toDelete);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataService/DeleteDoctor", ReplyAction="http://tempuri.org/IDataService/DeleteDoctorResponse")]
        System.Threading.Tasks.Task<bool> DeleteDoctorAsync(DatabaseAccess.DataAccessService.Doctor toDelete);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataService/DeletePatient", ReplyAction="http://tempuri.org/IDataService/DeletePatientResponse")]
        bool DeletePatient(DatabaseAccess.DataAccessService.Patient toDelete);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataService/DeletePatient", ReplyAction="http://tempuri.org/IDataService/DeletePatientResponse")]
        System.Threading.Tasks.Task<bool> DeletePatientAsync(DatabaseAccess.DataAccessService.Patient toDelete);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataService/DeleteSpecialization", ReplyAction="http://tempuri.org/IDataService/DeleteSpecializationResponse")]
        bool DeleteSpecialization(DatabaseAccess.DataAccessService.Specialization toDelete);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataService/DeleteSpecialization", ReplyAction="http://tempuri.org/IDataService/DeleteSpecializationResponse")]
        System.Threading.Tasks.Task<bool> DeleteSpecializationAsync(DatabaseAccess.DataAccessService.Specialization toDelete);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataService/DeleteRequest", ReplyAction="http://tempuri.org/IDataService/DeleteRequestResponse")]
        bool DeleteRequest(DatabaseAccess.DataAccessService.ProfileRequest toDelete);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataService/DeleteRequest", ReplyAction="http://tempuri.org/IDataService/DeleteRequestResponse")]
        System.Threading.Tasks.Task<bool> DeleteRequestAsync(DatabaseAccess.DataAccessService.ProfileRequest toDelete);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataService/AddPatient", ReplyAction="http://tempuri.org/IDataService/AddPatientResponse")]
        bool AddPatient(DatabaseAccess.DataAccessService.Patient toAdd);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataService/AddPatient", ReplyAction="http://tempuri.org/IDataService/AddPatientResponse")]
        System.Threading.Tasks.Task<bool> AddPatientAsync(DatabaseAccess.DataAccessService.Patient toAdd);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataService/AddDoctor", ReplyAction="http://tempuri.org/IDataService/AddDoctorResponse")]
        bool AddDoctor(DatabaseAccess.DataAccessService.Doctor toAdd);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataService/AddDoctor", ReplyAction="http://tempuri.org/IDataService/AddDoctorResponse")]
        System.Threading.Tasks.Task<bool> AddDoctorAsync(DatabaseAccess.DataAccessService.Doctor toAdd);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataService/AddSpecialization", ReplyAction="http://tempuri.org/IDataService/AddSpecializationResponse")]
        bool AddSpecialization(DatabaseAccess.DataAccessService.Specialization toAdd);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataService/AddSpecialization", ReplyAction="http://tempuri.org/IDataService/AddSpecializationResponse")]
        System.Threading.Tasks.Task<bool> AddSpecializationAsync(DatabaseAccess.DataAccessService.Specialization toAdd);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataService/AddRequest", ReplyAction="http://tempuri.org/IDataService/AddRequestResponse")]
        bool AddRequest(DatabaseAccess.DataAccessService.ProfileRequest toAdd);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataService/AddRequest", ReplyAction="http://tempuri.org/IDataService/AddRequestResponse")]
        System.Threading.Tasks.Task<bool> AddRequestAsync(DatabaseAccess.DataAccessService.ProfileRequest toAdd);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataService/RegisterVisit", ReplyAction="http://tempuri.org/IDataService/RegisterVisitResponse")]
        bool RegisterVisit(System.DateTime selected, int patientId, int doctorId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataService/RegisterVisit", ReplyAction="http://tempuri.org/IDataService/RegisterVisitResponse")]
        System.Threading.Tasks.Task<bool> RegisterVisitAsync(System.DateTime selected, int patientId, int doctorId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataService/DeleteVisit", ReplyAction="http://tempuri.org/IDataService/DeleteVisitResponse")]
        bool DeleteVisit(DatabaseAccess.DataAccessService.Visit ToDelete);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataService/DeleteVisit", ReplyAction="http://tempuri.org/IDataService/DeleteVisitResponse")]
        System.Threading.Tasks.Task<bool> DeleteVisitAsync(DatabaseAccess.DataAccessService.Visit ToDelete);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataService/GetFirstFreeSlot", ReplyAction="http://tempuri.org/IDataService/GetFirstFreeSlotResponse")]
        System.DateTime GetFirstFreeSlot(int doctorId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataService/GetFirstFreeSlot", ReplyAction="http://tempuri.org/IDataService/GetFirstFreeSlotResponse")]
        System.Threading.Tasks.Task<System.DateTime> GetFirstFreeSlotAsync(int doctorId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataService/GetPatients", ReplyAction="http://tempuri.org/IDataService/GetPatientsResponse")]
        DatabaseAccess.DataAccessService.Patient[] GetPatients();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataService/GetPatients", ReplyAction="http://tempuri.org/IDataService/GetPatientsResponse")]
        System.Threading.Tasks.Task<DatabaseAccess.DataAccessService.Patient[]> GetPatientsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataService/Dispose", ReplyAction="http://tempuri.org/IDataService/DisposeResponse")]
        void Dispose();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataService/Dispose", ReplyAction="http://tempuri.org/IDataService/DisposeResponse")]
        System.Threading.Tasks.Task DisposeAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IDataServiceChannel : DatabaseAccess.DataAccessService.IDataService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DataServiceClient : System.ServiceModel.ClientBase<DatabaseAccess.DataAccessService.IDataService>, DatabaseAccess.DataAccessService.IDataService {
        
        public DataServiceClient() {
        }
        
        public DataServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public DataServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DataServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DataServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public DatabaseAccess.DataAccessService.User GetUserById(int value) {
            return base.Channel.GetUserById(value);
        }
        
        public System.Threading.Tasks.Task<DatabaseAccess.DataAccessService.User> GetUserByIdAsync(int value) {
            return base.Channel.GetUserByIdAsync(value);
        }
        
        public DatabaseAccess.DataAccessService.User GetUser(string pes, string password) {
            return base.Channel.GetUser(pes, password);
        }
        
        public System.Threading.Tasks.Task<DatabaseAccess.DataAccessService.User> GetUserAsync(string pes, string password) {
            return base.Channel.GetUserAsync(pes, password);
        }
        
        public DatabaseAccess.DataAccessService.Doctor GetDoctorById(int value) {
            return base.Channel.GetDoctorById(value);
        }
        
        public System.Threading.Tasks.Task<DatabaseAccess.DataAccessService.Doctor> GetDoctorByIdAsync(int value) {
            return base.Channel.GetDoctorByIdAsync(value);
        }
        
        public DatabaseAccess.DataAccessService.Doctor GetDoctorByUserId(int value) {
            return base.Channel.GetDoctorByUserId(value);
        }
        
        public System.Threading.Tasks.Task<DatabaseAccess.DataAccessService.Doctor> GetDoctorByUserIdAsync(int value) {
            return base.Channel.GetDoctorByUserIdAsync(value);
        }
        
        public DatabaseAccess.DataAccessService.Patient GetPatientById(int value) {
            return base.Channel.GetPatientById(value);
        }
        
        public System.Threading.Tasks.Task<DatabaseAccess.DataAccessService.Patient> GetPatientByIdAsync(int value) {
            return base.Channel.GetPatientByIdAsync(value);
        }
        
        public DatabaseAccess.DataAccessService.Patient GetPatientByUserId(int value) {
            return base.Channel.GetPatientByUserId(value);
        }
        
        public System.Threading.Tasks.Task<DatabaseAccess.DataAccessService.Patient> GetPatientByUserIdAsync(int value) {
            return base.Channel.GetPatientByUserIdAsync(value);
        }
        
        public void Fill() {
            base.Channel.Fill();
        }
        
        public System.Threading.Tasks.Task FillAsync() {
            return base.Channel.FillAsync();
        }
        
        public DatabaseAccess.DataAccessService.Doctor[] GetDoctorsList() {
            return base.Channel.GetDoctorsList();
        }
        
        public System.Threading.Tasks.Task<DatabaseAccess.DataAccessService.Doctor[]> GetDoctorsListAsync() {
            return base.Channel.GetDoctorsListAsync();
        }
        
        public DatabaseAccess.DataAccessService.Doctor[] SearchDoctorsList(DatabaseAccess.DataAccessService.Specialization spec, string name) {
            return base.Channel.SearchDoctorsList(spec, name);
        }
        
        public System.Threading.Tasks.Task<DatabaseAccess.DataAccessService.Doctor[]> SearchDoctorsListAsync(DatabaseAccess.DataAccessService.Specialization spec, string name) {
            return base.Channel.SearchDoctorsListAsync(spec, name);
        }
        
        public DatabaseAccess.DataAccessService.Specialization[] GetSpecializationsList() {
            return base.Channel.GetSpecializationsList();
        }
        
        public System.Threading.Tasks.Task<DatabaseAccess.DataAccessService.Specialization[]> GetSpecializationsListAsync() {
            return base.Channel.GetSpecializationsListAsync();
        }
        
        public DatabaseAccess.DataAccessService.Visit[] GetPatientVisits(int id, bool arc) {
            return base.Channel.GetPatientVisits(id, arc);
        }
        
        public System.Threading.Tasks.Task<DatabaseAccess.DataAccessService.Visit[]> GetPatientVisitsAsync(int id, bool arc) {
            return base.Channel.GetPatientVisitsAsync(id, arc);
        }
        
        public DatabaseAccess.DataAccessService.Visit[] GetDoctorVisits(int id, bool arc) {
            return base.Channel.GetDoctorVisits(id, arc);
        }
        
        public System.Threading.Tasks.Task<DatabaseAccess.DataAccessService.Visit[]> GetDoctorVisitsAsync(int id, bool arc) {
            return base.Channel.GetDoctorVisitsAsync(id, arc);
        }
        
        public DatabaseAccess.DataAccessService.ProfileRequest[] GetRequests() {
            return base.Channel.GetRequests();
        }
        
        public System.Threading.Tasks.Task<DatabaseAccess.DataAccessService.ProfileRequest[]> GetRequestsAsync() {
            return base.Channel.GetRequestsAsync();
        }
        
        public bool UpdatePatient(DatabaseAccess.DataAccessService.Patient toUpdate) {
            return base.Channel.UpdatePatient(toUpdate);
        }
        
        public System.Threading.Tasks.Task<bool> UpdatePatientAsync(DatabaseAccess.DataAccessService.Patient toUpdate) {
            return base.Channel.UpdatePatientAsync(toUpdate);
        }
        
        public bool UpdateUserPassword(int id, string pass) {
            return base.Channel.UpdateUserPassword(id, pass);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateUserPasswordAsync(int id, string pass) {
            return base.Channel.UpdateUserPasswordAsync(id, pass);
        }
        
        public bool UpdateDoctor(DatabaseAccess.DataAccessService.Doctor toUpdate) {
            return base.Channel.UpdateDoctor(toUpdate);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateDoctorAsync(DatabaseAccess.DataAccessService.Doctor toUpdate) {
            return base.Channel.UpdateDoctorAsync(toUpdate);
        }
        
        public bool UpdateSpecialization(DatabaseAccess.DataAccessService.Specialization toUpdate) {
            return base.Channel.UpdateSpecialization(toUpdate);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateSpecializationAsync(DatabaseAccess.DataAccessService.Specialization toUpdate) {
            return base.Channel.UpdateSpecializationAsync(toUpdate);
        }
        
        public bool DeleteDoctor(DatabaseAccess.DataAccessService.Doctor toDelete) {
            return base.Channel.DeleteDoctor(toDelete);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteDoctorAsync(DatabaseAccess.DataAccessService.Doctor toDelete) {
            return base.Channel.DeleteDoctorAsync(toDelete);
        }
        
        public bool DeletePatient(DatabaseAccess.DataAccessService.Patient toDelete) {
            return base.Channel.DeletePatient(toDelete);
        }
        
        public System.Threading.Tasks.Task<bool> DeletePatientAsync(DatabaseAccess.DataAccessService.Patient toDelete) {
            return base.Channel.DeletePatientAsync(toDelete);
        }
        
        public bool DeleteSpecialization(DatabaseAccess.DataAccessService.Specialization toDelete) {
            return base.Channel.DeleteSpecialization(toDelete);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteSpecializationAsync(DatabaseAccess.DataAccessService.Specialization toDelete) {
            return base.Channel.DeleteSpecializationAsync(toDelete);
        }
        
        public bool DeleteRequest(DatabaseAccess.DataAccessService.ProfileRequest toDelete) {
            return base.Channel.DeleteRequest(toDelete);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteRequestAsync(DatabaseAccess.DataAccessService.ProfileRequest toDelete) {
            return base.Channel.DeleteRequestAsync(toDelete);
        }
        
        public bool AddPatient(DatabaseAccess.DataAccessService.Patient toAdd) {
            return base.Channel.AddPatient(toAdd);
        }
        
        public System.Threading.Tasks.Task<bool> AddPatientAsync(DatabaseAccess.DataAccessService.Patient toAdd) {
            return base.Channel.AddPatientAsync(toAdd);
        }
        
        public bool AddDoctor(DatabaseAccess.DataAccessService.Doctor toAdd) {
            return base.Channel.AddDoctor(toAdd);
        }
        
        public System.Threading.Tasks.Task<bool> AddDoctorAsync(DatabaseAccess.DataAccessService.Doctor toAdd) {
            return base.Channel.AddDoctorAsync(toAdd);
        }
        
        public bool AddSpecialization(DatabaseAccess.DataAccessService.Specialization toAdd) {
            return base.Channel.AddSpecialization(toAdd);
        }
        
        public System.Threading.Tasks.Task<bool> AddSpecializationAsync(DatabaseAccess.DataAccessService.Specialization toAdd) {
            return base.Channel.AddSpecializationAsync(toAdd);
        }
        
        public bool AddRequest(DatabaseAccess.DataAccessService.ProfileRequest toAdd) {
            return base.Channel.AddRequest(toAdd);
        }
        
        public System.Threading.Tasks.Task<bool> AddRequestAsync(DatabaseAccess.DataAccessService.ProfileRequest toAdd) {
            return base.Channel.AddRequestAsync(toAdd);
        }
        
        public bool RegisterVisit(System.DateTime selected, int patientId, int doctorId) {
            return base.Channel.RegisterVisit(selected, patientId, doctorId);
        }
        
        public System.Threading.Tasks.Task<bool> RegisterVisitAsync(System.DateTime selected, int patientId, int doctorId) {
            return base.Channel.RegisterVisitAsync(selected, patientId, doctorId);
        }
        
        public bool DeleteVisit(DatabaseAccess.DataAccessService.Visit ToDelete) {
            return base.Channel.DeleteVisit(ToDelete);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteVisitAsync(DatabaseAccess.DataAccessService.Visit ToDelete) {
            return base.Channel.DeleteVisitAsync(ToDelete);
        }
        
        public System.DateTime GetFirstFreeSlot(int doctorId) {
            return base.Channel.GetFirstFreeSlot(doctorId);
        }
        
        public System.Threading.Tasks.Task<System.DateTime> GetFirstFreeSlotAsync(int doctorId) {
            return base.Channel.GetFirstFreeSlotAsync(doctorId);
        }
        
        public DatabaseAccess.DataAccessService.Patient[] GetPatients() {
            return base.Channel.GetPatients();
        }
        
        public System.Threading.Tasks.Task<DatabaseAccess.DataAccessService.Patient[]> GetPatientsAsync() {
            return base.Channel.GetPatientsAsync();
        }
        
        public void Dispose() {
            base.Channel.Dispose();
        }
        
        public System.Threading.Tasks.Task DisposeAsync() {
            return base.Channel.DisposeAsync();
        }
    }
}
